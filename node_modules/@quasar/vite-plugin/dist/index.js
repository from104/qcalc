'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vite = require('vite');
var package_json = require('quasar/package.json');
var importTransformation = require('quasar/dist/transforms/import-transformation.js');
var autoImportData = require('quasar/dist/transforms/auto-import.json');
var loaderAssetUrls_json = require('quasar/dist/transforms/loader-asset-urls.json');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var importTransformation__default = /*#__PURE__*/_interopDefaultLegacy(importTransformation);
var autoImportData__default = /*#__PURE__*/_interopDefaultLegacy(autoImportData);
var loaderAssetUrls_json__default = /*#__PURE__*/_interopDefaultLegacy(loaderAssetUrls_json);

function getViteConfig (runMode, externalViteCfg) {
  const viteCfg = {
    define: {
      __QUASAR_VERSION__: `'${ package_json.version }'`,
      __QUASAR_SSR__: false,
      __QUASAR_SSR_SERVER__: false,
      __QUASAR_SSR_CLIENT__: false
    }
  };

  // Set this to the default value only if it's not already set.
  // @quasar/app-vite configures this by itself when it needs it.
  if (!externalViteCfg.define || externalViteCfg.define.__QUASAR_SSR_PWA__ === void 0) {
    viteCfg.define.__QUASAR_SSR_PWA__ = false;
  }

  if (runMode === 'ssr-server') {
    Object.assign(viteCfg.define, {
      __QUASAR_SSR__: true,
      __QUASAR_SSR_SERVER__: true
    });
  }
  else {
    viteCfg.optimizeDeps = {
      exclude: [ 'quasar' ]
    };

    if (runMode === 'ssr-client') {
      Object.assign(viteCfg.define, {
        __QUASAR_SSR__: true,
        __QUASAR_SSR_CLIENT__: true
      });
    }
  }

  return viteCfg
}

const importQuasarRegex = /import\s*\{([\w,\s]+)\}\s*from\s*(['"])quasar\2;?/g;
const jsTransformRegex = /\.[jt]sx?$/;

function jsTransform (code, importMap = {}) {
  return code.replace(
    importQuasarRegex,
    (_, match) => match.split(',')
      .map(identifier => {
        const data = identifier.split(' as ');
        const importName = data[0].trim();

        // might be an empty entry like below
        // (notice useQuasar is followed by a comma)
        // import { QTable, useQuasar, } from 'quasar'
        if (importName === '') {
          return ''
        }

        const importAs = data[1] !== void 0
          ? data[1].trim()
          : importName;

        importMap[importName] = importAs;
        return `import ${ importAs } from '${ importTransformation__default["default"](importName) }';`
      })
      .join('')
  )
}

const vueTransformRegex = /\.vue(\?vue&type=template&lang.js)?$/;

const compRegex = {
  'kebab': new RegExp(`_resolveComponent\\("${autoImportData__default["default"].regex.kebabComponents}"\\)`, 'g'),
  'pascal': new RegExp(`_resolveComponent\\("${autoImportData__default["default"].regex.pascalComponents}"\\)`, 'g'),
  'combined': new RegExp(`_resolveComponent\\("${autoImportData__default["default"].regex.components}"\\)`, 'g')
};

const dirRegex = new RegExp(`_resolveDirective\\("${autoImportData__default["default"].regex.directives.replace(/v-/g, '')}"\\)`, 'g');
const lengthSortFn = (a, b) => b.length - a.length;

function vueTransform (content, autoImportComponentCase) {
  const importList = [];
  const importMap = {};

  const compList = [];
  const dirList = [];

  const reverseMap = {};

  let code = jsTransform(content, importMap)
    .replace(compRegex[autoImportComponentCase], (_, match) => {
      const name = autoImportData__default["default"].importName[match];
      const reverseName = match.replace(/-/g, '_');

      if (importMap[name] === void 0) {
        importList.push( name );
        reverseMap[reverseName] = name;
      }
      else {
        reverseMap[reverseName] = importMap[name];
      }

      compList.push(reverseName);
      return ''
    })
    .replace(dirRegex, (_, match) => {
      const name = autoImportData__default["default"].importName['v-' + match];
      const reverseName = match.replace(/-/g, '_');

      if (importMap[name] === void 0) {
        importList.push( name );
        reverseMap[reverseName] = name;
      }
      else {
        reverseMap[reverseName] = importMap[name];
      }

      dirList.push(reverseName);
      return ''
    });

  if (importList.length === 0) {
    return code
  }

  if (compList.length > 0) {
    const list = compList.sort(lengthSortFn).join('|');
    code = code
      .replace(new RegExp(`const _component_(${list}) = `, 'g'), '')
      .replace(new RegExp(`_component_(${list})`, 'g'), (_, match) => reverseMap[match]);
  }

  if (dirList.length > 0) {
    const list = dirList.sort(lengthSortFn).join('|');
    code = code
      .replace(new RegExp(`const _directive_(${list}) = `, 'g'), '')
      .replace(new RegExp(`_directive_(${list})`, 'g'), (_, match) => reverseMap[match]);
  }

  const codePrefix = importList
    .map(name => `import ${name} from '${importTransformation__default["default"](name)}'`)
    .join(`;`);

  return codePrefix + ';' + code
}

const scssTransformRegex = /\.scss$/;
const sassTransformRegex = /\.sass$/;

function createScssTransform (fileExtension, sassVariables) {
  const sassImportCode = [ `@import 'quasar/src/css/variables.sass'`, '' ];

  if (typeof sassVariables === 'string') {
    sassImportCode.unshift(`@import '${ sassVariables }'`);
  }

  const prefix = fileExtension === 'sass'
    ? sassImportCode.join('\n')
    : sassImportCode.join(';\n');

  return content => {
    let useIndex = Math.max(
      content.lastIndexOf('@use '),
      content.lastIndexOf('@forward ')
    );

    if (useIndex === -1) {
      return prefix + content
    }

    const newLineIndex = content.indexOf('\n', useIndex);
    
    if (newLineIndex !== -1) {
      const index = newLineIndex + 1;
      return content.substring(0, index) + prefix + content.substring(index)
    }

    return content + '\n' + prefix
  }
}

const defaultOptions = {
  runMode: 'web-client',
  autoImportComponentCase: 'kebab',
  sassVariables: true
};

function getConfigPlugin (opts) {
  return {
    name: 'vite:quasar:vite-conf',
    config (viteConf) {
      const vueCfg = viteConf.plugins.find(entry => entry.name === 'vite:vue');

      if (vueCfg === void 0) {
        console.warn('In your Vite config file, please add the Quasar plugin after the Vue one');
        process.exit(1);
      }

      return getViteConfig(opts.runMode, viteConf)
    }
  }
}

function getScssTransformsPlugin (opts) {
  const sassVariables = typeof opts.sassVariables === 'string'
    ? vite.normalizePath(opts.sassVariables)
    : opts.sassVariables;

  const scssTransform = createScssTransform('scss', sassVariables);
  const sassTransform = createScssTransform('sass', sassVariables);

  return {
    name: 'vite:quasar:scss',
    enforce: 'pre',
    transform (src, id) {
      if (scssTransformRegex.test(id) === true) {
        return {
          code: scssTransform(src),
          map: null
        }
      }
      if (sassTransformRegex.test(id) === true) {
        return {
          code: sassTransform(src),
          map: null
        }
      }

      return null
    }
  }
}

function getScriptTransformsPlugin (opts) {
  return {
    name: 'vite:quasar:script',
    transform (src, id) {
      if (vueTransformRegex.test(id) === true) {
        return {
          code: vueTransform(src, opts.autoImportComponentCase),
          map: null // provide source map if available
        }
      }
      else if (jsTransformRegex.test(id) === true) {
        return {
          code: jsTransform(src),
          map: null // provide source map if available
        }
      }

      return null
    }
  }
}

function plugin (userOpts = {}) {
  const opts = {
    ...defaultOptions,
    ...userOpts
  };

  const plugins = [
    getConfigPlugin(opts)
  ];

  if (opts.sassVariables) {
    plugins.push(
      getScssTransformsPlugin(opts)
    );
  }

  if (opts.runMode !== 'ssr-server') {
    plugins.push(
      getScriptTransformsPlugin(opts)
    );
  }

  return plugins
}

Object.defineProperty(exports, 'transformAssetUrls', {
  enumerable: true,
  get: function () { return loaderAssetUrls_json__default["default"]; }
});
exports.quasar = plugin;
